#include<iostream>
#include<vector>
#include<bits/stdc++.h>
using namespace std;


class disJointSet{
vector<int>rank,parent;
public:
DisjointSet(int n){
rank.resize(n+1,0);
parent.resize(n+1);
for(int i=0;i<=n;i++){
parent[i]=i;}}

int findUpar(int node){
if(node==parent[node])return node;
return parent[node]= findUpair(parent[node]);
}

void unionByrank(int u,int v){
int ulp_u=findUpar(u);
int ulp_v=findUpar(v);
if(ulp_v==ulp_u)return ;
if(rank[ulp_u]<rank[ulp_v]){
parent[ulp_u]=ulp_v;}else if(rank[ulp_v]<rank[ulp_u]){
parent[ulp_v]=ulp_u;}
else{
parent[ulp_u]=ulp_v;
rank[ulp_u]++;
}


};
int main(){

disJointSet ds(7);
ds.union(1,2);
ds.union(2,3);
ds.union(4,5);
ds.union(6,6);
ds.union(5,6);
if(ds.findUpair(3)==ds.findUpair(7)){
cout<<"same\n";}else{
cout<<"not same\n";}
ds.union(3,7);






return 0;}
